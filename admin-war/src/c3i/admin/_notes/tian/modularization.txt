Modularization

Goal: make c3i modular such that:

1.  It can still be used in its current stand-alone capacity
2.  It can be leveraged from EFC which has it's own sat solver and FM

Modules:

Image Model: takes picks, view, angle outputs image stack

jpg gen service
    start job

New Ideas from JS meeting
    How to create a hash-based job-id that is more appropriate to the scope of the jpg-gen-job:
        csp = csp.select("tundra","2014)
        csp = csp.reduce() //lossy reduce
        String sha = csp.sha();
    Can we call Hitachi's code client-side (rather than server-side) to avoid the dependency hell

Other DF notes:
    Serialization? current serialization supports fm + im
    Should we separate:
        project 1: make jpg gen an external service, where fm and sat solver are *not* part of c3i
        project 2: make end-user service, where fm and sat solver are *not* part of c3i

General strategy:
    refactor current code-base (without breaking) to support the
    basic type of modularization needed by efc.

    1.  refactor to support a scenario where fm and sat solver were not part of of c3i
